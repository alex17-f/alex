import json
import time
import requests
import hmac
import hashlib
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open("config.json") as config_file:
    config = json.load(config_file)

BINANCE_API_KEY = config["BINANCE_API_KEY"]
BINANCE_SECRET_KEY = config["BINANCE_SECRET_KEY"]
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = config["TELEGRAM_CHAT_ID"]
TRADE_AMOUNT = config["TRADE_AMOUNT"]
MAX_BALANCE_PERCENT = config["MAX_BALANCE_PERCENT"]
PROFIT_THRESHOLD = config["PROFIT_THRESHOLD"]
FIAT = config["FIAT"] if isinstance(config["FIAT"], list) else [config["FIAT"]]
AUTO_UPDATE = config["AUTO_UPDATE"]

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    requests.post(url, data=data)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è P2P-—Ü–µ–Ω Binance
def get_p2p_prices(trade_type):
    best_deal = None
    for currency in FIAT:
        url = "https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search"
        data = {
            "asset": "USDT",
            "tradeType": trade_type,
            "fiat": currency,
            "page": 1,
            "rows": 10
        }
        response = requests.post(url, json=data)
        if response.status_code == 200:
            prices = response.json().get("data", [])
            if prices:
                best_price = float(prices[0]["adv"]["price"])
                if best_deal is None or (trade_type == "BUY" and best_price < best_deal["price"]) or (trade_type == "SELL" and best_price > best_deal["price"]):
                    best_deal = {"price": best_price, "fiat": currency}
    return best_deal

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ USDT
def buy_usdt():
    best_deal = get_p2p_prices("BUY")
    if not best_deal:
        send_telegram_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT.")
        return

    best_price = best_deal["price"]
    currency = best_deal["fiat"]
    send_telegram_message(f"üîç –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {best_price} {currency} –∑–∞ 1 USDT")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ USDT
def sell_usdt():
    best_deal = get_p2p_prices("SELL")
    if not best_deal:
        send_telegram_message("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT.")
        return

    best_price = best_deal["price"]
    currency = best_deal["fiat"]
    send_telegram_message(f"üí∞ –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {best_price} {currency} –∑–∞ 1 USDT")

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def update_bot():
    if AUTO_UPDATE:
        send_telegram_message("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞... üîÑ")
        os.system("git pull origin main")
        send_telegram_message("–ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º... ‚úÖ")
        os.system("python3 p2p_bot.py")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
def main():
    send_telegram_message("ü§ñ P2P-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        buy_usdt()
        sell_usdt()
        time.sleep(60)

if __name__ == "__main__":
    update_bot()
    main()
